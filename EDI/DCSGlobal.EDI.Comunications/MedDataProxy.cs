//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.0.
// 
#pragma warning disable 1591

namespace MedDataPxy
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MedData External Submission PortalSoap", Namespace = "http://services.medconnect.net/submissionportal")]
    public partial class MedDataExternalSubmissionPortal : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private SecurityHeader securityHeaderValueField;

        private System.Threading.SendOrPostCallback SubmitASyncOperationCompleted;

        private System.Threading.SendOrPostCallback SubmitASyncDetailOperationCompleted;

        private System.Threading.SendOrPostCallback GetResponsesOperationCompleted;

        private System.Threading.SendOrPostCallback GetResponsesBySubmissionIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetResponsesByTrackingIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetResponsesByPayerIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetResponsesByProviderIdOperationCompleted;

        private System.Threading.SendOrPostCallback SubmitSyncOperationCompleted;

        private System.Threading.SendOrPostCallback SubmitSyncDetailOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public MedDataExternalSubmissionPortal()
        {
            //this.Url = global::DCSGlobal.EDI.Comunications.Properties.Settings.Default.DCSGlobal_Eligibility_Comunications_com_meddatahealth_services_MedData_x0020_External_x0020_Submission_x0020_Portal;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public SecurityHeader SecurityHeaderValue
        {
            get
            {
                return this.securityHeaderValueField;
            }
            set
            {
                this.securityHeaderValueField = value;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event SubmitASyncCompletedEventHandler SubmitASyncCompleted;

        /// <remarks/>
        public event SubmitASyncDetailCompletedEventHandler SubmitASyncDetailCompleted;

        /// <remarks/>
        public event GetResponsesCompletedEventHandler GetResponsesCompleted;

        /// <remarks/>
        public event GetResponsesBySubmissionIdCompletedEventHandler GetResponsesBySubmissionIdCompleted;

        /// <remarks/>
        public event GetResponsesByTrackingIdCompletedEventHandler GetResponsesByTrackingIdCompleted;

        /// <remarks/>
        public event GetResponsesByPayerIdCompletedEventHandler GetResponsesByPayerIdCompleted;

        /// <remarks/>
        public event GetResponsesByProviderIdCompletedEventHandler GetResponsesByProviderIdCompleted;

        /// <remarks/>
        public event SubmitSyncCompletedEventHandler SubmitSyncCompleted;

        /// <remarks/>
        public event SubmitSyncDetailCompletedEventHandler SubmitSyncDetailCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/SubmitASync", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitASync(string request, string requestFormat, string submissionTimeout)
        {
            object[] results = this.Invoke("SubmitASync", new object[] {
                        request,
                        requestFormat,
                        submissionTimeout});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SubmitASyncAsync(string request, string requestFormat, string submissionTimeout)
        {
            this.SubmitASyncAsync(request, requestFormat, submissionTimeout, null);
        }

        /// <remarks/>
        public void SubmitASyncAsync(string request, string requestFormat, string submissionTimeout, object userState)
        {
            if ((this.SubmitASyncOperationCompleted == null))
            {
                this.SubmitASyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitASyncOperationCompleted);
            }
            this.InvokeAsync("SubmitASync", new object[] {
                        request,
                        requestFormat,
                        submissionTimeout}, this.SubmitASyncOperationCompleted, userState);
        }

        private void OnSubmitASyncOperationCompleted(object arg)
        {
            if ((this.SubmitASyncCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitASyncCompleted(this, new SubmitASyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/SubmitASyncDetail", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SubmitASyncDetail(string request, string requestFormat, string submissionTimeout)
        {
            object[] results = this.Invoke("SubmitASyncDetail", new object[] {
                        request,
                        requestFormat,
                        submissionTimeout});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void SubmitASyncDetailAsync(string request, string requestFormat, string submissionTimeout)
        {
            this.SubmitASyncDetailAsync(request, requestFormat, submissionTimeout, null);
        }

        /// <remarks/>
        public void SubmitASyncDetailAsync(string request, string requestFormat, string submissionTimeout, object userState)
        {
            if ((this.SubmitASyncDetailOperationCompleted == null))
            {
                this.SubmitASyncDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitASyncDetailOperationCompleted);
            }
            this.InvokeAsync("SubmitASyncDetail", new object[] {
                        request,
                        requestFormat,
                        submissionTimeout}, this.SubmitASyncDetailOperationCompleted, userState);
        }

        private void OnSubmitASyncDetailOperationCompleted(object arg)
        {
            if ((this.SubmitASyncDetailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitASyncDetailCompleted(this, new SubmitASyncDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/GetResponses", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResponses(string responseFormat)
        {
            object[] results = this.Invoke("GetResponses", new object[] {
                        responseFormat});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResponsesAsync(string responseFormat)
        {
            this.GetResponsesAsync(responseFormat, null);
        }

        /// <remarks/>
        public void GetResponsesAsync(string responseFormat, object userState)
        {
            if ((this.GetResponsesOperationCompleted == null))
            {
                this.GetResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponsesOperationCompleted);
            }
            this.InvokeAsync("GetResponses", new object[] {
                        responseFormat}, this.GetResponsesOperationCompleted, userState);
        }

        private void OnGetResponsesOperationCompleted(object arg)
        {
            if ((this.GetResponsesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponsesCompleted(this, new GetResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/GetResponsesBySubmissionId", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResponsesBySubmissionId(string submissionId, string responseFormat, bool overrideSent)
        {
            object[] results = this.Invoke("GetResponsesBySubmissionId", new object[] {
                        submissionId,
                        responseFormat,
                        overrideSent});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResponsesBySubmissionIdAsync(string submissionId, string responseFormat, bool overrideSent)
        {
            this.GetResponsesBySubmissionIdAsync(submissionId, responseFormat, overrideSent, null);
        }

        /// <remarks/>
        public void GetResponsesBySubmissionIdAsync(string submissionId, string responseFormat, bool overrideSent, object userState)
        {
            if ((this.GetResponsesBySubmissionIdOperationCompleted == null))
            {
                this.GetResponsesBySubmissionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponsesBySubmissionIdOperationCompleted);
            }
            this.InvokeAsync("GetResponsesBySubmissionId", new object[] {
                        submissionId,
                        responseFormat,
                        overrideSent}, this.GetResponsesBySubmissionIdOperationCompleted, userState);
        }

        private void OnGetResponsesBySubmissionIdOperationCompleted(object arg)
        {
            if ((this.GetResponsesBySubmissionIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponsesBySubmissionIdCompleted(this, new GetResponsesBySubmissionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/GetResponsesByTrackingId", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResponsesByTrackingId(string trackingId, string responseFormat, bool overrideSent)
        {
            object[] results = this.Invoke("GetResponsesByTrackingId", new object[] {
                        trackingId,
                        responseFormat,
                        overrideSent});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResponsesByTrackingIdAsync(string trackingId, string responseFormat, bool overrideSent)
        {
            this.GetResponsesByTrackingIdAsync(trackingId, responseFormat, overrideSent, null);
        }

        /// <remarks/>
        public void GetResponsesByTrackingIdAsync(string trackingId, string responseFormat, bool overrideSent, object userState)
        {
            if ((this.GetResponsesByTrackingIdOperationCompleted == null))
            {
                this.GetResponsesByTrackingIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponsesByTrackingIdOperationCompleted);
            }
            this.InvokeAsync("GetResponsesByTrackingId", new object[] {
                        trackingId,
                        responseFormat,
                        overrideSent}, this.GetResponsesByTrackingIdOperationCompleted, userState);
        }

        private void OnGetResponsesByTrackingIdOperationCompleted(object arg)
        {
            if ((this.GetResponsesByTrackingIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponsesByTrackingIdCompleted(this, new GetResponsesByTrackingIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/GetResponsesByPayerId", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResponsesByPayerId(string payerId, string responseFormat, bool overrideSent)
        {
            object[] results = this.Invoke("GetResponsesByPayerId", new object[] {
                        payerId,
                        responseFormat,
                        overrideSent});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResponsesByPayerIdAsync(string payerId, string responseFormat, bool overrideSent)
        {
            this.GetResponsesByPayerIdAsync(payerId, responseFormat, overrideSent, null);
        }

        /// <remarks/>
        public void GetResponsesByPayerIdAsync(string payerId, string responseFormat, bool overrideSent, object userState)
        {
            if ((this.GetResponsesByPayerIdOperationCompleted == null))
            {
                this.GetResponsesByPayerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponsesByPayerIdOperationCompleted);
            }
            this.InvokeAsync("GetResponsesByPayerId", new object[] {
                        payerId,
                        responseFormat,
                        overrideSent}, this.GetResponsesByPayerIdOperationCompleted, userState);
        }

        private void OnGetResponsesByPayerIdOperationCompleted(object arg)
        {
            if ((this.GetResponsesByPayerIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponsesByPayerIdCompleted(this, new GetResponsesByPayerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/GetResponsesByProviderId", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResponsesByProviderId(string providerId, string responseFormat, bool overrideSent)
        {
            object[] results = this.Invoke("GetResponsesByProviderId", new object[] {
                        providerId,
                        responseFormat,
                        overrideSent});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResponsesByProviderIdAsync(string providerId, string responseFormat, bool overrideSent)
        {
            this.GetResponsesByProviderIdAsync(providerId, responseFormat, overrideSent, null);
        }

        /// <remarks/>
        public void GetResponsesByProviderIdAsync(string providerId, string responseFormat, bool overrideSent, object userState)
        {
            if ((this.GetResponsesByProviderIdOperationCompleted == null))
            {
                this.GetResponsesByProviderIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponsesByProviderIdOperationCompleted);
            }
            this.InvokeAsync("GetResponsesByProviderId", new object[] {
                        providerId,
                        responseFormat,
                        overrideSent}, this.GetResponsesByProviderIdOperationCompleted, userState);
        }

        private void OnGetResponsesByProviderIdOperationCompleted(object arg)
        {
            if ((this.GetResponsesByProviderIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponsesByProviderIdCompleted(this, new GetResponsesByProviderIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/SubmitSync", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitSync(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout)
        {
            object[] results = this.Invoke("SubmitSync", new object[] {
                        request,
                        requestFormat,
                        responseFormat,
                        synchronousTimeout,
                        submissionTimeout});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SubmitSyncAsync(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout)
        {
            this.SubmitSyncAsync(request, requestFormat, responseFormat, synchronousTimeout, submissionTimeout, null);
        }

        /// <remarks/>
        public void SubmitSyncAsync(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout, object userState)
        {
            if ((this.SubmitSyncOperationCompleted == null))
            {
                this.SubmitSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitSyncOperationCompleted);
            }
            this.InvokeAsync("SubmitSync", new object[] {
                        request,
                        requestFormat,
                        responseFormat,
                        synchronousTimeout,
                        submissionTimeout}, this.SubmitSyncOperationCompleted, userState);
        }

        private void OnSubmitSyncOperationCompleted(object arg)
        {
            if ((this.SubmitSyncCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitSyncCompleted(this, new SubmitSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.medconnect.net/submissionportal/SubmitSyncDetail", RequestNamespace = "http://services.medconnect.net/submissionportal", ResponseNamespace = "http://services.medconnect.net/submissionportal", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SubmitSyncDetail(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout)
        {
            object[] results = this.Invoke("SubmitSyncDetail", new object[] {
                        request,
                        requestFormat,
                        responseFormat,
                        synchronousTimeout,
                        submissionTimeout});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void SubmitSyncDetailAsync(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout)
        {
            this.SubmitSyncDetailAsync(request, requestFormat, responseFormat, synchronousTimeout, submissionTimeout, null);
        }

        /// <remarks/>
        public void SubmitSyncDetailAsync(string request, string requestFormat, string responseFormat, string synchronousTimeout, string submissionTimeout, object userState)
        {
            if ((this.SubmitSyncDetailOperationCompleted == null))
            {
                this.SubmitSyncDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitSyncDetailOperationCompleted);
            }
            this.InvokeAsync("SubmitSyncDetail", new object[] {
                        request,
                        requestFormat,
                        responseFormat,
                        synchronousTimeout,
                        submissionTimeout}, this.SubmitSyncDetailOperationCompleted, userState);
        }

        private void OnSubmitSyncDetailOperationCompleted(object arg)
        {
            if ((this.SubmitSyncDetailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitSyncDetailCompleted(this, new SubmitSyncDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.57.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://services.medconnect.net/submissionportal")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://services.medconnect.net/submissionportal", IsNullable = false)]
    public partial class SecurityHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string userNameField;

        private string passwordField;

        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string UserName
        {
            get
            {
                return this.userNameField;
            }
            set
            {
                this.userNameField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void SubmitASyncCompletedEventHandler(object sender, SubmitASyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitASyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubmitASyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void SubmitASyncDetailCompletedEventHandler(object sender, SubmitASyncDetailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitASyncDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubmitASyncDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void GetResponsesCompletedEventHandler(object sender, GetResponsesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResponsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void GetResponsesBySubmissionIdCompletedEventHandler(object sender, GetResponsesBySubmissionIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponsesBySubmissionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResponsesBySubmissionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void GetResponsesByTrackingIdCompletedEventHandler(object sender, GetResponsesByTrackingIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponsesByTrackingIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResponsesByTrackingIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void GetResponsesByPayerIdCompletedEventHandler(object sender, GetResponsesByPayerIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponsesByPayerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResponsesByPayerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void GetResponsesByProviderIdCompletedEventHandler(object sender, GetResponsesByProviderIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponsesByProviderIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResponsesByProviderIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void SubmitSyncCompletedEventHandler(object sender, SubmitSyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubmitSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    public delegate void SubmitSyncDetailCompletedEventHandler(object sender, SubmitSyncDetailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.57.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitSyncDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubmitSyncDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591